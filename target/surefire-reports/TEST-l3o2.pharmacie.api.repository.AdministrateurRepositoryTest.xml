<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.2" name="l3o2.pharmacie.api.repository.AdministrateurRepositoryTest" time="10.313" tests="9" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="C:\Users\Dell\Desktop\merged\target\test-classes;C:\Users\Dell\Desktop\merged\target\classes;C:\Users\Dell\.m2\repository\com\opencsv\opencsv\5.7.1\opencsv-5.7.1.jar;C:\Users\Dell\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;C:\Users\Dell\.m2\repository\org\apache\commons\commons-text\1.10.0\commons-text-1.10.0.jar;C:\Users\Dell\.m2\repository\commons-beanutils\commons-beanutils\1.9.4\commons-beanutils-1.9.4.jar;C:\Users\Dell\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\Dell\.m2\repository\commons-collections\commons-collections\3.2.2\commons-collections-3.2.2.jar;C:\Users\Dell\.m2\repository\org\apache\commons\commons-collections4\4.4\commons-collections4-4.4.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.4.3\spring-boot-starter-data-jpa-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter\3.4.3\spring-boot-starter-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot\3.4.3\spring-boot-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.4.3\spring-boot-autoconfigure-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.4.3\spring-boot-starter-logging-3.4.3.jar;C:\Users\Dell\.m2\repository\ch\qos\logback\logback-classic\1.5.16\logback-classic-1.5.16.jar;C:\Users\Dell\.m2\repository\ch\qos\logback\logback-core\1.5.16\logback-core-1.5.16.jar;C:\Users\Dell\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\Dell\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\Dell\.m2\repository\org\slf4j\jul-to-slf4j\2.0.16\jul-to-slf4j-2.0.16.jar;C:\Users\Dell\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Dell\.m2\repository\org\yaml\snakeyaml\2.3\snakeyaml-2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.4.3\spring-boot-starter-jdbc-3.4.3.jar;C:\Users\Dell\.m2\repository\com\zaxxer\HikariCP\5.1.0\HikariCP-5.1.0.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-jdbc\6.2.3\spring-jdbc-6.2.3.jar;C:\Users\Dell\.m2\repository\org\hibernate\orm\hibernate-core\6.6.8.Final\hibernate-core-6.6.8.Final.jar;C:\Users\Dell\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Dell\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Dell\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\Dell\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\Dell\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\Dell\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\Dell\.m2\repository\net\bytebuddy\byte-buddy\1.15.11\byte-buddy-1.15.11.jar;C:\Users\Dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\Dell\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\Dell\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\Dell\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\Dell\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\Dell\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Dell\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\Dell\.m2\repository\org\springframework\data\spring-data-jpa\3.4.3\spring-data-jpa-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\data\spring-data-commons\3.4.3\spring-data-commons-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-orm\6.2.3\spring-orm-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-tx\6.2.3\spring-tx-6.2.3.jar;C:\Users\Dell\.m2\repository\org\slf4j\slf4j-api\2.0.16\slf4j-api-2.0.16.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-aspects\6.2.3\spring-aspects-6.2.3.jar;C:\Users\Dell\.m2\repository\org\aspectj\aspectjweaver\1.9.22.1\aspectjweaver-1.9.22.1.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.4.3\spring-boot-starter-web-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.4.3\spring-boot-starter-json-3.4.3.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.18.2\jackson-databind-2.18.2.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.18.2\jackson-annotations-2.18.2.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.18.2\jackson-core-2.18.2.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.18.2\jackson-datatype-jdk8-2.18.2.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.18.2\jackson-datatype-jsr310-2.18.2.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.18.2\jackson-module-parameter-names-2.18.2.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.4.3\spring-boot-starter-tomcat-3.4.3.jar;C:\Users\Dell\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.36\tomcat-embed-core-10.1.36.jar;C:\Users\Dell\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.36\tomcat-embed-websocket-10.1.36.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-web\6.2.3\spring-web-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-webmvc\6.2.3\spring-webmvc-6.2.3.jar;C:\Users\Dell\.m2\repository\org\postgresql\postgresql\42.7.5\postgresql-42.7.5.jar;C:\Users\Dell\.m2\repository\org\checkerframework\checker-qual\3.48.3\checker-qual-3.48.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.4.3\spring-boot-starter-test-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-test\3.4.3\spring-boot-test-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.4.3\spring-boot-test-autoconfigure-3.4.3.jar;C:\Users\Dell\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\Dell\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\Dell\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\Dell\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\Dell\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\Dell\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\Dell\.m2\repository\org\assertj\assertj-core\3.26.3\assertj-core-3.26.3.jar;C:\Users\Dell\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\Dell\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\Dell\.m2\repository\org\junit\jupiter\junit-jupiter\5.11.4\junit-jupiter-5.11.4.jar;C:\Users\Dell\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.11.4\junit-jupiter-params-5.11.4.jar;C:\Users\Dell\.m2\repository\org\mockito\mockito-core\5.14.2\mockito-core-5.14.2.jar;C:\Users\Dell\.m2\repository\net\bytebuddy\byte-buddy-agent\1.15.11\byte-buddy-agent-1.15.11.jar;C:\Users\Dell\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\Dell\.m2\repository\org\mockito\mockito-junit-jupiter\5.14.2\mockito-junit-jupiter-5.14.2.jar;C:\Users\Dell\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\Dell\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-core\6.2.3\spring-core-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-jcl\6.2.3\spring-jcl-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-test\6.2.3\spring-test-6.2.3.jar;C:\Users\Dell\.m2\repository\org\xmlunit\xmlunit-core\2.10.0\xmlunit-core-2.10.0.jar;C:\Users\Dell\.m2\repository\org\projectlombok\lombok\1.18.30\lombok-1.18.30.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.4.3\spring-boot-starter-validation-3.4.3.jar;C:\Users\Dell\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.36\tomcat-embed-el-10.1.36.jar;C:\Users\Dell\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.2.Final\hibernate-validator-8.0.2.Final.jar;C:\Users\Dell\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\Dell\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.11.4\junit-jupiter-engine-5.11.4.jar;C:\Users\Dell\.m2\repository\org\junit\platform\junit-platform-engine\1.11.4\junit-platform-engine-1.11.4.jar;C:\Users\Dell\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\Dell\.m2\repository\org\junit\platform\junit-platform-commons\1.11.4\junit-platform-commons-1.11.4.jar;C:\Users\Dell\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.11.4\junit-jupiter-api-5.11.4.jar;C:\Users\Dell\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Dell\.m2\repository\org\springframework\security\spring-security-core\6.4.4\spring-security-core-6.4.4.jar;C:\Users\Dell\.m2\repository\org\springframework\security\spring-security-crypto\6.4.3\spring-security-crypto-6.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-aop\6.2.3\spring-aop-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-beans\6.2.3\spring-beans-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-context\6.2.3\spring-context-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-expression\6.2.3\spring-expression-6.2.3.jar;C:\Users\Dell\.m2\repository\io\micrometer\micrometer-observation\1.14.4\micrometer-observation-1.14.4.jar;C:\Users\Dell\.m2\repository\io\micrometer\micrometer-commons\1.14.4\micrometer-commons-1.14.4.jar;C:\Users\Dell\.m2\repository\com\h2database\h2\2.3.232\h2-2.3.232.jar;"/>
    <property name="java.vm.vendor" value="Eclipse Adoptium"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://adoptium.net/"/>
    <property name="user.timezone" value="Europe/Paris"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="user.country.format" value="DZ"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="APPLICATION_NAME" value="pharmacie"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="FR"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Eclipse Adoptium\jdk-21.0.3.9-hotspot\bin"/>
    <property name="sun.java.command" value="C:\Users\Dell\AppData\Local\Temp\surefire13439590913019565286\surefirebooter-20250413000003335_3.jar C:\Users\Dell\AppData\Local\Temp\surefire13439590913019565286 2025-04-13T00-00-03_077-jvmRun1 surefire-20250413000003335_1tmp surefire_0-20250413000003335_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\Dell\Desktop\merged\target\test-classes;C:\Users\Dell\Desktop\merged\target\classes;C:\Users\Dell\.m2\repository\com\opencsv\opencsv\5.7.1\opencsv-5.7.1.jar;C:\Users\Dell\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;C:\Users\Dell\.m2\repository\org\apache\commons\commons-text\1.10.0\commons-text-1.10.0.jar;C:\Users\Dell\.m2\repository\commons-beanutils\commons-beanutils\1.9.4\commons-beanutils-1.9.4.jar;C:\Users\Dell\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\Dell\.m2\repository\commons-collections\commons-collections\3.2.2\commons-collections-3.2.2.jar;C:\Users\Dell\.m2\repository\org\apache\commons\commons-collections4\4.4\commons-collections4-4.4.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.4.3\spring-boot-starter-data-jpa-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter\3.4.3\spring-boot-starter-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot\3.4.3\spring-boot-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.4.3\spring-boot-autoconfigure-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.4.3\spring-boot-starter-logging-3.4.3.jar;C:\Users\Dell\.m2\repository\ch\qos\logback\logback-classic\1.5.16\logback-classic-1.5.16.jar;C:\Users\Dell\.m2\repository\ch\qos\logback\logback-core\1.5.16\logback-core-1.5.16.jar;C:\Users\Dell\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\Dell\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\Dell\.m2\repository\org\slf4j\jul-to-slf4j\2.0.16\jul-to-slf4j-2.0.16.jar;C:\Users\Dell\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Dell\.m2\repository\org\yaml\snakeyaml\2.3\snakeyaml-2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.4.3\spring-boot-starter-jdbc-3.4.3.jar;C:\Users\Dell\.m2\repository\com\zaxxer\HikariCP\5.1.0\HikariCP-5.1.0.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-jdbc\6.2.3\spring-jdbc-6.2.3.jar;C:\Users\Dell\.m2\repository\org\hibernate\orm\hibernate-core\6.6.8.Final\hibernate-core-6.6.8.Final.jar;C:\Users\Dell\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Dell\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Dell\.m2\repository\org\jboss\logging\jboss-logging\3.6.1.Final\jboss-logging-3.6.1.Final.jar;C:\Users\Dell\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\Dell\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\Dell\.m2\repository\com\fasterxml\classmate\1.7.0\classmate-1.7.0.jar;C:\Users\Dell\.m2\repository\net\bytebuddy\byte-buddy\1.15.11\byte-buddy-1.15.11.jar;C:\Users\Dell\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.5\jaxb-runtime-4.0.5.jar;C:\Users\Dell\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.5\jaxb-core-4.0.5.jar;C:\Users\Dell\.m2\repository\org\eclipse\angus\angus-activation\2.0.2\angus-activation-2.0.2.jar;C:\Users\Dell\.m2\repository\org\glassfish\jaxb\txw2\4.0.5\txw2-4.0.5.jar;C:\Users\Dell\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\Dell\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Dell\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\Dell\.m2\repository\org\springframework\data\spring-data-jpa\3.4.3\spring-data-jpa-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\data\spring-data-commons\3.4.3\spring-data-commons-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-orm\6.2.3\spring-orm-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-tx\6.2.3\spring-tx-6.2.3.jar;C:\Users\Dell\.m2\repository\org\slf4j\slf4j-api\2.0.16\slf4j-api-2.0.16.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-aspects\6.2.3\spring-aspects-6.2.3.jar;C:\Users\Dell\.m2\repository\org\aspectj\aspectjweaver\1.9.22.1\aspectjweaver-1.9.22.1.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.4.3\spring-boot-starter-web-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.4.3\spring-boot-starter-json-3.4.3.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.18.2\jackson-databind-2.18.2.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.18.2\jackson-annotations-2.18.2.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.18.2\jackson-core-2.18.2.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.18.2\jackson-datatype-jdk8-2.18.2.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.18.2\jackson-datatype-jsr310-2.18.2.jar;C:\Users\Dell\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.18.2\jackson-module-parameter-names-2.18.2.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.4.3\spring-boot-starter-tomcat-3.4.3.jar;C:\Users\Dell\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.36\tomcat-embed-core-10.1.36.jar;C:\Users\Dell\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.36\tomcat-embed-websocket-10.1.36.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-web\6.2.3\spring-web-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-webmvc\6.2.3\spring-webmvc-6.2.3.jar;C:\Users\Dell\.m2\repository\org\postgresql\postgresql\42.7.5\postgresql-42.7.5.jar;C:\Users\Dell\.m2\repository\org\checkerframework\checker-qual\3.48.3\checker-qual-3.48.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.4.3\spring-boot-starter-test-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-test\3.4.3\spring-boot-test-3.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.4.3\spring-boot-test-autoconfigure-3.4.3.jar;C:\Users\Dell\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\Dell\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\Dell\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\Dell\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\Dell\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\Dell\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\Dell\.m2\repository\org\assertj\assertj-core\3.26.3\assertj-core-3.26.3.jar;C:\Users\Dell\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\Dell\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\Dell\.m2\repository\org\junit\jupiter\junit-jupiter\5.11.4\junit-jupiter-5.11.4.jar;C:\Users\Dell\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.11.4\junit-jupiter-params-5.11.4.jar;C:\Users\Dell\.m2\repository\org\mockito\mockito-core\5.14.2\mockito-core-5.14.2.jar;C:\Users\Dell\.m2\repository\net\bytebuddy\byte-buddy-agent\1.15.11\byte-buddy-agent-1.15.11.jar;C:\Users\Dell\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\Dell\.m2\repository\org\mockito\mockito-junit-jupiter\5.14.2\mockito-junit-jupiter-5.14.2.jar;C:\Users\Dell\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\Dell\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-core\6.2.3\spring-core-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-jcl\6.2.3\spring-jcl-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-test\6.2.3\spring-test-6.2.3.jar;C:\Users\Dell\.m2\repository\org\xmlunit\xmlunit-core\2.10.0\xmlunit-core-2.10.0.jar;C:\Users\Dell\.m2\repository\org\projectlombok\lombok\1.18.30\lombok-1.18.30.jar;C:\Users\Dell\.m2\repository\org\springframework\boot\spring-boot-starter-validation\3.4.3\spring-boot-starter-validation-3.4.3.jar;C:\Users\Dell\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.36\tomcat-embed-el-10.1.36.jar;C:\Users\Dell\.m2\repository\org\hibernate\validator\hibernate-validator\8.0.2.Final\hibernate-validator-8.0.2.Final.jar;C:\Users\Dell\.m2\repository\jakarta\validation\jakarta.validation-api\3.0.2\jakarta.validation-api-3.0.2.jar;C:\Users\Dell\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.11.4\junit-jupiter-engine-5.11.4.jar;C:\Users\Dell\.m2\repository\org\junit\platform\junit-platform-engine\1.11.4\junit-platform-engine-1.11.4.jar;C:\Users\Dell\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\Dell\.m2\repository\org\junit\platform\junit-platform-commons\1.11.4\junit-platform-commons-1.11.4.jar;C:\Users\Dell\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.11.4\junit-jupiter-api-5.11.4.jar;C:\Users\Dell\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Dell\.m2\repository\org\springframework\security\spring-security-core\6.4.4\spring-security-core-6.4.4.jar;C:\Users\Dell\.m2\repository\org\springframework\security\spring-security-crypto\6.4.3\spring-security-crypto-6.4.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-aop\6.2.3\spring-aop-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-beans\6.2.3\spring-beans-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-context\6.2.3\spring-context-6.2.3.jar;C:\Users\Dell\.m2\repository\org\springframework\spring-expression\6.2.3\spring-expression-6.2.3.jar;C:\Users\Dell\.m2\repository\io\micrometer\micrometer-observation\1.14.4\micrometer-observation-1.14.4.jar;C:\Users\Dell\.m2\repository\io\micrometer\micrometer-commons\1.14.4\micrometer-commons-1.14.4.jar;C:\Users\Dell\.m2\repository\com\h2database\h2\2.3.232\h2-2.3.232.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\Dell"/>
    <property name="user.language" value="fr"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-04-16"/>
    <property name="java.home" value="C:\Program Files\Eclipse Adoptium\jdk-21.0.3.9-hotspot"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\Dell\Desktop\merged"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="C:\Users\Dell\AppData\Local\Temp\surefire13439590913019565286\surefirebooter-20250413000003335_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="21.0.3+9-LTS"/>
    <property name="user.name" value="Dell"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Temurin-21.0.3+9"/>
    <property name="localRepository" value="C:\Users\Dell\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/adoptium/adoptium-support/issues"/>
    <property name="java.io.tmpdir" value="C:\Users\Dell\AppData\Local\Temp\"/>
    <property name="java.version" value="21.0.3"/>
    <property name="user.dir" value="C:\Users\Dell\Desktop\merged"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="21864"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="C:\Program Files\Eclipse Adoptium\jdk-21.0.3.9-hotspot\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Eclipse Adoptium\jdk-21.0.3.9-hotspot\bin;C:\Python312\Scripts\;C:\Python312\;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Oracle\Java\java8path;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\;C:\Program Files\NVIDIA Corporation\NVIDIA NGX;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;D:\MATLAB\matlab2\bin;C:\Program Files (x86)\dotnet\;C:\Program Files\dotnet\;C:\Program Files\nodejs\;C:\ProgramData\chocolatey\bin;C:\Program Files\swipl\bin;C:\Gradle\bin\;C:\Users\Dell\AppData\Local\Android\Sdk\build-tools;C:\Users\Dell\AppData\Local\Android\Sdk\cmdline-tools\latest\bin;C:\Users\Dell\AppData\Local\Android\Sdk\emulator;C:\Users\Dell\AppData\Local\Android\Sdk\platform-tools;C:\Program Files\Git\cmd;C:\texlive\2024\bin\windows;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files (x86)\Gpg4win\..\GnuPG\bin;C:\Program Files\NetBeans-16\netbeans\java\maven\bin;C:\PROGRA~1\Red Gate\Flyway Desktop\;C:\MinGW\bin;C:\Program Files\TortoiseSVN\bin;C:\Program Files\SlikSvn\bin;C:\Users\Dell\AppData\Local\jdk-11.0.2\bin;C:\Users\Dell\AppData\Local\Android\Sdk\tools;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Dell\AppData\Local\Microsoft\WindowsApps;C:\Users\Dell\.dotnet\tools;C:\Users\Dell\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Dell\AppData\Roaming\npm;C:\Program Files\Eclipse Adoptium\jdk-21.0.3.9-hotspot\bin;C:\Users\Dell\AppData\Local\GitHubDesktop\bin;C:\Program Files\heroku\bin;c:\Users\Dell\AppData\Roaming\Code\User\globalStorage\github.copilot-chat\debugCommand;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Eclipse Adoptium"/>
    <property name="java.vm.version" value="21.0.3+9-LTS"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="65.0"/>
    <property name="LOGGED_APPLICATION_NAME" value="[pharmacie] "/>
  </properties>
  <testcase name="findByMatricule_WhenNotExists_ShouldReturnEmpty" classname="l3o2.pharmacie.api.repository.AdministrateurRepositoryTest" time="0.491">
    <system-out><![CDATA[2025-04-13T00:00:09.793+02:00  INFO 21864 --- [pharmacie] [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [l3o2.pharmacie.api.repository.AdministrateurRepositoryTest]: AdministrateurRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-04-13T00:00:09.987+02:00  INFO 21864 --- [pharmacie] [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration l3o2.pharmacie.Application for test class l3o2.pharmacie.api.repository.AdministrateurRepositoryTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.3)

2025-04-13T00:00:10.151+02:00  INFO 21864 --- [pharmacie] [           main] l.p.a.r.AdministrateurRepositoryTest     : Starting AdministrateurRepositoryTest using Java 21.0.3 with PID 21864 (started by Dell in C:\Users\Dell\Desktop\merged)
2025-04-13T00:00:10.151+02:00  INFO 21864 --- [pharmacie] [           main] l.p.a.r.AdministrateurRepositoryTest     : The following 1 profile is active: "test"
2025-04-13T00:00:10.959+02:00  INFO 21864 --- [pharmacie] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-13T00:00:11.281+02:00  INFO 21864 --- [pharmacie] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 292 ms. Found 18 JPA repository interfaces.
2025-04-13T00:00:11.474+02:00  INFO 21864 --- [pharmacie] [           main] beddedDataSourceBeanFactoryPostProcessor : Replacing 'dataSource' DataSource bean with embedded version
2025-04-13T00:00:11.670+02:00  INFO 21864 --- [pharmacie] [           main] o.s.j.d.e.EmbeddedDatabaseFactory        : Starting embedded database: url='jdbc:h2:mem:6b62bb46-4bd3-4d85-9d99-0a07a8e9f90f;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2025-04-13T00:00:12.337+02:00  INFO 21864 --- [pharmacie] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-13T00:00:12.509+02:00  INFO 21864 --- [pharmacie] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.8.Final
2025-04-13T00:00:12.621+02:00  INFO 21864 --- [pharmacie] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-04-13T00:00:12.922+02:00  INFO 21864 --- [pharmacie] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-13T00:00:13.025+02:00  WARN 21864 --- [pharmacie] [           main] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-13T00:00:13.075+02:00  INFO 21864 --- [pharmacie] [           main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory$EmbeddedDataSourceProxy@103e9972']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
Hibernate: 
    create global temporary table HTE_personnes(dateMiseAJour date, dateEmbauche timestamp(6), salaire float(53), idPersonne uuid not null, user_type varchar(31) not null, adeli varchar(255), adresse varchar(255), civilite varchar(255), codePostal varchar(255), conventionnement varchar(255), diplome varchar(255), ecole varchar(255), email varchar(255), emailPro varchar(255), honoraires varchar(255), matricule varchar(255), modeExercice varchar(255), mutuelle varchar(255), nom varchar(255), numeroRPPS varchar(255), numeroSecu varchar(255), password varchar(255), prenom varchar(255), profession varchar(255), role varchar(255), rpps varchar(255), secteur varchar(255), siret varchar(255), siteWeb varchar(255), specialitePrincipale varchar(255), specialiteSecondaire varchar(255), telephone varchar(255), ville varchar(255), poste enum ('ADMINISTRATEUR', 'APPRENTI', 'PHARMACIEN_ADJOINT', 'PREPARATEUR', 'TITULAIRE'), statutContrat enum ('APPRENTISSAGE', 'CDD', 'CDI', 'STAGE'), primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HT_Employe(idPersonne uuid not null, primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HTE_Employe(dateEmbauche timestamp(6), salaire float(53), idPersonne uuid not null, user_type varchar(31) not null, adresse varchar(255), diplome varchar(255), ecole varchar(255), email varchar(255), emailPro varchar(255), matricule varchar(255), nom varchar(255), numeroRPPS varchar(255), password varchar(255), prenom varchar(255), role varchar(255), telephone varchar(255), poste enum ('ADMINISTRATEUR', 'APPRENTI', 'PHARMACIEN_ADJOINT', 'PREPARATEUR', 'TITULAIRE'), statutContrat enum ('APPRENTISSAGE', 'CDD', 'CDI', 'STAGE'), primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HT_Client(idPersonne uuid not null, primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HTE_Client(idPersonne uuid not null, user_type varchar(31) not null, adresse varchar(255), email varchar(255), mutuelle varchar(255), nom varchar(255), numeroSecu varchar(255), prenom varchar(255), telephone varchar(255), primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HTE_PharmacienAdjoint(dateEmbauche timestamp(6), salaire float(53), idPersonne uuid not null, user_type varchar(31) not null, adresse varchar(255), diplome varchar(255), email varchar(255), emailPro varchar(255), matricule varchar(255), nom varchar(255), password varchar(255), prenom varchar(255), telephone varchar(255), poste enum ('ADMINISTRATEUR', 'APPRENTI', 'PHARMACIEN_ADJOINT', 'PREPARATEUR', 'TITULAIRE'), statutContrat enum ('APPRENTISSAGE', 'CDD', 'CDI', 'STAGE'), primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HTE_Administrateur(dateEmbauche timestamp(6), salaire float(53), idPersonne uuid not null, user_type varchar(31) not null, adresse varchar(255), diplome varchar(255), email varchar(255), emailPro varchar(255), matricule varchar(255), nom varchar(255), numeroRPPS varchar(255), password varchar(255), prenom varchar(255), role varchar(255), telephone varchar(255), poste enum ('ADMINISTRATEUR', 'APPRENTI', 'PHARMACIEN_ADJOINT', 'PREPARATEUR', 'TITULAIRE'), statutContrat enum ('APPRENTISSAGE', 'CDD', 'CDI', 'STAGE'), primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HTE_Titulaire(dateEmbauche timestamp(6), salaire float(53), idPersonne uuid not null, user_type varchar(31) not null, adresse varchar(255), diplome varchar(255), email varchar(255), emailPro varchar(255), matricule varchar(255), nom varchar(255), numeroRPPS varchar(255), password varchar(255), prenom varchar(255), role varchar(255), telephone varchar(255), poste enum ('ADMINISTRATEUR', 'APPRENTI', 'PHARMACIEN_ADJOINT', 'PREPARATEUR', 'TITULAIRE'), statutContrat enum ('APPRENTISSAGE', 'CDD', 'CDI', 'STAGE'), primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HT_Medecin(idPersonne uuid not null, primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HTE_Medecin(dateMiseAJour date, idPersonne uuid not null, user_type varchar(31) not null, adeli varchar(255), adresse varchar(255), civilite varchar(255), codePostal varchar(255), conventionnement varchar(255), email varchar(255), honoraires varchar(255), modeExercice varchar(255), nom varchar(255), prenom varchar(255), profession varchar(255), rpps varchar(255), secteur varchar(255), siret varchar(255), siteWeb varchar(255), specialitePrincipale varchar(255), specialiteSecondaire varchar(255), telephone varchar(255), ville varchar(255), primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HTE_Preparateur(dateEmbauche timestamp(6), salaire float(53), idPersonne uuid not null, user_type varchar(31) not null, adresse varchar(255), diplome varchar(255), email varchar(255), emailPro varchar(255), matricule varchar(255), nom varchar(255), password varchar(255), prenom varchar(255), telephone varchar(255), poste enum ('ADMINISTRATEUR', 'APPRENTI', 'PHARMACIEN_ADJOINT', 'PREPARATEUR', 'TITULAIRE'), statutContrat enum ('APPRENTISSAGE', 'CDD', 'CDI', 'STAGE'), primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HTE_lignes_commandes(montantLigne numeric(38, 2), prixUnitaire numeric(38, 2), quantite integer, rn_ integer not null, id bigint, stock_medicament_id bigint, commande_id uuid, primary key (rn_)) TRANSACTIONAL
Hibernate: 
    create global temporary table HTE_Apprenti(dateEmbauche timestamp(6), salaire float(53), idPersonne uuid not null, user_type varchar(31) not null, adresse varchar(255), diplome varchar(255), ecole varchar(255), email varchar(255), emailPro varchar(255), matricule varchar(255), nom varchar(255), password varchar(255), prenom varchar(255), telephone varchar(255), poste enum ('ADMINISTRATEUR', 'APPRENTI', 'PHARMACIEN_ADJOINT', 'PREPARATEUR', 'TITULAIRE'), statutContrat enum ('APPRENTISSAGE', 'CDD', 'CDI', 'STAGE'), primary key (idPersonne)) TRANSACTIONAL
Hibernate: 
    create global temporary table HT_personnes(idPersonne uuid not null, primary key (idPersonne)) TRANSACTIONAL
2025-04-13T00:00:15.634+02:00  INFO 21864 --- [pharmacie] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    drop table if exists Administrateur cascade 
Hibernate: 
    drop table if exists Apprenti cascade 
Hibernate: 
    drop table if exists cis_bdpm cascade 
Hibernate: 
    drop table if exists cis_cip_bdpm cascade 
Hibernate: 
    drop table if exists cis_cip_dispo_spec cascade 
Hibernate: 
    drop table if exists cis_compo_bdpm cascade 
Hibernate: 
    drop table if exists cis_cpd_bdpm cascade 
Hibernate: 
    drop table if exists cis_gener_bdpm cascade 
Hibernate: 
    drop table if exists cis_has_asmr cascade 
Hibernate: 
    drop table if exists cis_has_smr cascade 
Hibernate: 
    drop table if exists cis_info_importantes cascade 
Hibernate: 
    drop table if exists cis_mitm cascade 
Hibernate: 
    drop table if exists Client cascade 
Hibernate: 
    drop table if exists commandes cascade 
Hibernate: 
    drop table if exists Employe cascade 
Hibernate: 
    drop table if exists Fournisseur cascade 
Hibernate: 
    drop table if exists has_liens_page_ct cascade 
Hibernate: 
    drop table if exists lignes_commandes cascade 
Hibernate: 
    drop table if exists Medecin cascade 
Hibernate: 
    drop table if exists Medecin_languesParlees cascade 
Hibernate: 
    drop table if exists medicaments cascade 
Hibernate: 
    drop table if exists medicaments_panier cascade 
Hibernate: 
    drop table if exists ordonnances cascade 
Hibernate: 
    drop table if exists personnes cascade 
Hibernate: 
    drop table if exists PharmacienAdjoint cascade 
Hibernate: 
    drop table if exists Preparateur cascade 
Hibernate: 
    drop table if exists prescriptions cascade 
Hibernate: 
    drop table if exists stock_medicament cascade 
Hibernate: 
    drop table if exists Titulaire cascade 
Hibernate: 
    drop table if exists ventes cascade 
Hibernate: 
    drop sequence if exists lignes_commandes_SEQ
Hibernate: 
    create sequence lignes_commandes_SEQ start with 1 increment by 50
Hibernate: 
    create table Administrateur (
        idPersonne uuid not null,
        role varchar(255) not null,
        primary key (idPersonne)
    )
Hibernate: 
    create table Apprenti (
        idPersonne uuid not null,
        ecole varchar(255) not null,
        primary key (idPersonne)
    )
Hibernate: 
    create table cis_bdpm (
        date_amm date,
        surveillance_renforcee varchar(3),
        code_cis varchar(20) not null,
        statut_bdm varchar(30),
        etat_commercialisation varchar(50),
        numero_autorisation_europeenne varchar(50),
        statut_amm varchar(50),
        type_procedure_amm varchar(50),
        forme_pharmaceutique varchar(100),
        voies_administration varchar(200),
        denomination varchar(500) not null,
        titulaires varchar(500),
        primary key (code_cis)
    )
Hibernate: 
    create table cis_cip_bdpm (
        date_declaration_commercialisation date,
        prix_ht numeric(10,2),
        prix_ttc numeric(10,2),
        taxe numeric(5,2),
        id bigint generated by default as identity,
        code_cis varchar(20) not null,
        agrement_collectivites varchar(255),
        code_cip13 varchar(255) not null unique,
        code_cip7 varchar(255) not null unique,
        etat_commercialisation varchar(255),
        indications_remboursement TEXT,
        libelle_presentation varchar(255),
        statut_administratif varchar(255),
        taux_remboursement varchar(255),
        primary key (id)
    )
Hibernate: 
    create table cis_cip_dispo_spec (
        code_statut integer not null check ((code_statut<=4) and (code_statut>=1)),
        date_debut date not null,
        date_mise_a_jour date not null,
        date_remise_disposition date,
        id bigint generated by default as identity,
        medicament_id bigint,
        code_cis varchar(20) not null,
        code_cip13 varchar(255),
        libelle_statut varchar(255) not null,
        lien_ansm TEXT,
        primary key (id)
    )
Hibernate: 
    create table cis_compo_bdpm (
        id bigint generated by default as identity,
        code_cis varchar(20) not null,
        code_substance varchar(255),
        denomination_substance varchar(255),
        designation_element varchar(255),
        dosage varchar(255),
        nature_composant varchar(255),
        numero_liaison_saft varchar(255),
        reference_dosage varchar(255),
        primary key (id)
    )
Hibernate: 
    create table cis_cpd_bdpm (
        id bigint generated by default as identity,
        code_cis varchar(20) not null,
        condition_prescription TEXT not null,
        primary key (id)
    )
Hibernate: 
    create table cis_gener_bdpm (
        numero_tri integer,
        type_generique tinyint not null check (type_generique between 0 and 3),
        code_cis varchar(20) not null,
        identifiant_groupe_generique varchar(255) not null,
        libelle_groupe_generique varchar(255),
        primary key (identifiant_groupe_generique)
    )
Hibernate: 
    create table cis_has_asmr (
        date_avis date,
        code_cis varchar(20) not null,
        code_dossier_has varchar(255) not null,
        libelle_asmr TEXT,
        motif_evaluation varchar(255),
        valeur_asmr varchar(255),
        primary key (code_dossier_has)
    )
Hibernate: 
    create table cis_has_smr (
        code_cis varchar(20) not null,
        code_dossier_has varchar(255) not null,
        date_avis varchar(255),
        libelle_smr TEXT,
        motif_evaluation varchar(255),
        valeur_smr varchar(255),
        primary key (code_dossier_has)
    )
Hibernate: 
    create table cis_info_importantes (
        date_debut date not null,
        date_fin date,
        id bigint generated by default as identity,
        code_cis varchar(20) not null,
        texte_lien_html TEXT not null,
        primary key (id)
    )
Hibernate: 
    create table cis_mitm (
        code_atc varchar(7) not null,
        id bigint generated by default as identity,
        code_cis varchar(20) not null,
        denomination varchar(500) not null,
        lien_bdpm TEXT not null,
        primary key (id)
    )
Hibernate: 
    create table Client (
        idPersonne uuid not null,
        mutuelle varchar(255),
        numeroSecu varchar(255),
        primary key (idPersonne)
    )
Hibernate: 
    create table commandes (
        montantTotal numeric(38,2) not null,
        dateCommande timestamp(6) not null,
        fournisseur_id uuid not null,
        pharmacien_adjoint_id uuid not null,
        reference uuid not null,
        statut varchar(255) not null,
        primary key (reference)
    )
Hibernate: 
    create table Employe (
        salaire float(53) not null,
        dateEmbauche timestamp(6) not null,
        idPersonne uuid not null,
        diplome varchar(255),
        emailPro varchar(255) not null unique,
        matricule varchar(255) not null unique,
        password varchar(255) not null,
        poste enum ('ADMINISTRATEUR','APPRENTI','PHARMACIEN_ADJOINT','PREPARATEUR','TITULAIRE') not null,
        statutContrat enum ('APPRENTISSAGE','CDD','CDI','STAGE') not null,
        primary key (idPersonne)
    )
Hibernate: 
    create table Fournisseur (
        idFournisseur uuid not null,
        adresse varchar(255) not null,
        email varchar(255) not null,
        fax varchar(255),
        nomSociete varchar(255) not null,
        sujetFonction varchar(255),
        telephone varchar(255) not null,
        primary key (idFournisseur)
    )
Hibernate: 
    create table has_liens_page_ct (
        code_dossier_has varchar(50) not null,
        lien_avis_ct TEXT,
        primary key (code_dossier_has)
    )
Hibernate: 
    create table lignes_commandes (
        montantLigne numeric(38,2) not null,
        prixUnitaire numeric(38,2) not null,
        quantite integer not null,
        id bigint not null,
        stock_medicament_id bigint not null,
        commande_id uuid not null,
        primary key (id)
    )
Hibernate: 
    create table Medecin (
        dateMiseAJour date not null,
        idPersonne uuid not null,
        adeli varchar(255) not null unique,
        civilite varchar(255) not null,
        codePostal varchar(255) not null,
        conventionnement varchar(255) not null,
        honoraires varchar(255) not null,
        modeExercice varchar(255) not null,
        profession varchar(255) not null,
        rpps varchar(255) not null unique,
        secteur varchar(255) not null,
        siret varchar(255) not null unique,
        siteWeb varchar(255),
        specialitePrincipale varchar(255) not null,
        specialiteSecondaire varchar(255),
        ville varchar(255) not null,
        primary key (idPersonne)
    )
Hibernate: 
    create table Medecin_languesParlees (
        Medecin_idPersonne uuid not null,
        languesParlees varchar(255)
    )
Hibernate: 
    create table medicaments (
        date_mise_a_jour date not null,
        date_peremption date,
        quantite integer not null,
        seuil_alerte integer,
        id bigint generated by default as identity,
        numero_lot varchar(50),
        emplacement varchar(100),
        code_cip13 varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table medicaments_panier (
        quantite integer not null,
        idMedicamentPanier bigint generated by default as identity,
        stock_medicament_id bigint not null,
        vente_id uuid not null,
        primary key (idMedicamentPanier)
    )
Hibernate: 
    create table ordonnances (
        dateEmission timestamp(6) not null,
        dateExpiration timestamp(6),
        client_id uuid not null,
        idOrdonnance uuid not null,
        medecin_id uuid not null,
        vente_id uuid,
        numeroOrd varchar(255) not null unique,
        rppsMedecin varchar(255) not null,
        primary key (idOrdonnance)
    )
Hibernate: 
    create table personnes (
        idPersonne uuid not null,
        user_type varchar(31) not null,
        adresse varchar(255),
        email varchar(255),
        nom varchar(255) not null,
        prenom varchar(255) not null,
        telephone varchar(255) not null,
        primary key (idPersonne)
    )
Hibernate: 
    create table PharmacienAdjoint (
        idPersonne uuid not null,
        primary key (idPersonne)
    )
Hibernate: 
    create table Preparateur (
        idPersonne uuid not null,
        primary key (idPersonne)
    )
Hibernate: 
    create table prescriptions (
        duree integer not null,
        quantitePrescrite integer not null,
        medicament_id bigint unique,
        idPrescription uuid not null,
        id_ordonnance uuid,
        posologie varchar(255) not null,
        primary key (idPrescription)
    )
Hibernate: 
    create table stock_medicament (
        date_mise_a_jour date not null,
        date_peremption date,
        quantite integer not null,
        seuil_alerte integer,
        id bigint generated by default as identity,
        numero_lot varchar(50),
        emplacement varchar(100),
        code_cip13 varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table Titulaire (
        idPersonne uuid not null,
        numeroRPPS varchar(255) not null unique,
        primary key (idPersonne)
    )
Hibernate: 
    create table ventes (
        montantRembourse float(53) not null,
        montantTotal float(53) not null,
        dateVente timestamp(6) not null,
        client_id uuid not null,
        idVente uuid not null,
        pharmacien_id uuid not null,
        modePaiement varchar(255) not null,
        primary key (idVente)
    )
Hibernate: 
    alter table if exists Administrateur 
       add constraint FKhitiv0wq3hvi73bdp9anredp4 
       foreign key (idPersonne) 
       references Employe
Hibernate: 
    alter table if exists Apprenti 
       add constraint FK930tw9hgxepypr90bldpnl4v1 
       foreign key (idPersonne) 
       references Employe
Hibernate: 
    alter table if exists cis_cip_bdpm 
       add constraint FKr0siosm7y3qy1kwg19fnocxtg 
       foreign key (code_cis) 
       references cis_bdpm
Hibernate: 
    alter table if exists cis_cip_dispo_spec 
       add constraint FKdctxo8ymy5o3570bdr1knp2f 
       foreign key (code_cis) 
       references cis_bdpm
Hibernate: 
    alter table if exists cis_cip_dispo_spec 
       add constraint FKh05ctl75c867ivrfkhtq0ug6y 
       foreign key (medicament_id) 
       references stock_medicament
Hibernate: 
    alter table if exists cis_compo_bdpm 
       add constraint FKkbu2gkwp7cs9h9vsdpsfxy3xy 
       foreign key (code_cis) 
       references cis_bdpm
Hibernate: 
    alter table if exists cis_cpd_bdpm 
       add constraint FKg32jmi2hq5xfmdd8c2nm08kt0 
       foreign key (code_cis) 
       references cis_bdpm
Hibernate: 
    alter table if exists cis_gener_bdpm 
       add constraint FKnko51jtp3735bmg0kl37v44g2 
       foreign key (code_cis) 
       references cis_bdpm
Hibernate: 
    alter table if exists cis_has_asmr 
       add constraint FKl0y2wr7chj63jb5arsm2c0b74 
       foreign key (code_cis) 
       references cis_bdpm
Hibernate: 
    alter table if exists cis_has_smr 
       add constraint FKs1c7lqqnsxxg5mq79rw5nfcjm 
       foreign key (code_cis) 
       references cis_bdpm
Hibernate: 
    alter table if exists cis_info_importantes 
       add constraint FKt4fyborlgk3lsdqj7vwxxg9t 
       foreign key (code_cis) 
       references cis_bdpm
Hibernate: 
    alter table if exists cis_mitm 
       add constraint FK2epuox8tkiun1e7bf67c6w6i0 
       foreign key (code_cis) 
       references cis_bdpm
Hibernate: 
    alter table if exists Client 
       add constraint FKsy60v0cueavavo1xpqa025iss 
       foreign key (idPersonne) 
       references personnes
Hibernate: 
    alter table if exists commandes 
       add constraint FK25d1hn2hlgym4uq24ujcrx9rf 
       foreign key (pharmacien_adjoint_id) 
       references PharmacienAdjoint
Hibernate: 
    alter table if exists commandes 
       add constraint FKjr8v96t0waa692h319xw7iq1a 
       foreign key (fournisseur_id) 
       references Fournisseur
Hibernate: 
    alter table if exists Employe 
       add constraint FKab2c28jijdbig0f9k1xhmax8v 
       foreign key (idPersonne) 
       references personnes
Hibernate: 
    alter table if exists lignes_commandes 
       add constraint FK9s223vyndo88thyh7s3cj86gr 
       foreign key (commande_id) 
       references commandes
Hibernate: 
    alter table if exists lignes_commandes 
       add constraint FKdts35nnafjn7d2slcq7a3pid5 
       foreign key (stock_medicament_id) 
       references stock_medicament
Hibernate: 
    alter table if exists Medecin 
       add constraint FKovh1cd2rqm31xtofkj41vlbxu 
       foreign key (idPersonne) 
       references personnes
Hibernate: 
    alter table if exists Medecin_languesParlees 
       add constraint FK4ukelhd2cte5ooonpfw6kb6sp 
       foreign key (Medecin_idPersonne) 
       references Medecin
Hibernate: 
    alter table if exists medicaments 
       add constraint FKbnggmr4mj845yos3j0r1rbvjb 
       foreign key (code_cip13) 
       references cis_cip_bdpm (code_cip13)
Hibernate: 
    alter table if exists medicaments_panier 
       add constraint FKg2g5dj99xmy996hb5vm7fnxd8 
       foreign key (stock_medicament_id) 
       references stock_medicament
Hibernate: 
    alter table if exists medicaments_panier 
       add constraint FK9lnvl9m23c2nsdfevp35cv0d8 
       foreign key (vente_id) 
       references ventes
Hibernate: 
    alter table if exists ordonnances 
       add constraint FK4up06ss990mojgges2lt7xm2s 
       foreign key (client_id) 
       references Client
Hibernate: 
    alter table if exists ordonnances 
       add constraint FKbsjucuj420qc4xju6x926l42i 
       foreign key (medecin_id) 
       references Medecin
Hibernate: 
    alter table if exists ordonnances 
       add constraint FK6ftog4f8qphnfhlarttrl6dep 
       foreign key (vente_id) 
       references ventes
Hibernate: 
    alter table if exists PharmacienAdjoint 
       add constraint FKsgsxsabc5yd88we7feihilvqw 
       foreign key (idPersonne) 
       references Employe
Hibernate: 
    alter table if exists Preparateur 
       add constraint FKg9hpya3u7mbc2acd7jq3mboi4 
       foreign key (idPersonne) 
       references Employe
Hibernate: 
    alter table if exists prescriptions 
       add constraint FKfcy71l1ikebl1mo6w2hxqgep5 
       foreign key (medicament_id) 
       references stock_medicament
Hibernate: 
    alter table if exists prescriptions 
       add constraint FKn0rhp78jijmtro5fq9ywd05wi 
       foreign key (id_ordonnance) 
       references ordonnances
Hibernate: 
    alter table if exists stock_medicament 
       add constraint FKc2oxbn6pndwwetjdwr4uyb27d 
       foreign key (code_cip13) 
       references cis_cip_bdpm (code_cip13)
Hibernate: 
    alter table if exists Titulaire 
       add constraint FKqdqkn96fkuy95fsmtd4yhj3rs 
       foreign key (idPersonne) 
       references Administrateur
Hibernate: 
    alter table if exists ventes 
       add constraint FKp7kjc0ckonq1ljtg8qu3d9anf 
       foreign key (client_id) 
       references Client
Hibernate: 
    alter table if exists ventes 
       add constraint FKoy34udm2jb0e9pg3wx7ca5v77 
       foreign key (pharmacien_id) 
       references PharmacienAdjoint
2025-04-13T00:00:15.770+02:00  INFO 21864 --- [pharmacie] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-13T00:00:16.318+02:00  INFO 21864 --- [pharmacie] [           main] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-13T00:00:18.307+02:00  INFO 21864 --- [pharmacie] [           main] l.p.a.r.AdministrateurRepositoryTest     : Started AdministrateurRepositoryTest in 8.31 seconds (process running for 14.726)
Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    select
        a1_0.idPersonne,
        a1_2.user_type,
        a1_2.adresse,
        a1_2.email,
        a1_2.nom,
        a1_2.prenom,
        a1_2.telephone,
        a1_1.dateEmbauche,
        a1_1.diplome,
        a1_1.emailPro,
        a1_1.matricule,
        a1_1.password,
        a1_1.poste,
        a1_1.salaire,
        a1_1.statutContrat,
        a1_0.role,
        a1_3.numeroRPPS 
    from
        Administrateur a1_0 
    join
        Employe a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        personnes a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    left join
        Titulaire a1_3 
            on a1_0.idPersonne=a1_3.idPersonne 
    where
        a1_1.matricule=?
]]></system-out>
  </testcase>
  <testcase name="findByRole_ShouldReturnAdminsWithSpecifiedRole" classname="l3o2.pharmacie.api.repository.AdministrateurRepositoryTest" time="0.184">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    select
        a1_0.idPersonne,
        a1_2.user_type,
        a1_2.adresse,
        a1_2.email,
        a1_2.nom,
        a1_2.prenom,
        a1_2.telephone,
        a1_1.dateEmbauche,
        a1_1.diplome,
        a1_1.emailPro,
        a1_1.matricule,
        a1_1.password,
        a1_1.poste,
        a1_1.salaire,
        a1_1.statutContrat,
        a1_0.role,
        a1_3.numeroRPPS 
    from
        Administrateur a1_0 
    join
        Employe a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        personnes a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    left join
        Titulaire a1_3 
            on a1_0.idPersonne=a1_3.idPersonne 
    where
        a1_0.role=?
Hibernate: 
    select
        a1_0.idPersonne,
        a1_2.user_type,
        a1_2.adresse,
        a1_2.email,
        a1_2.nom,
        a1_2.prenom,
        a1_2.telephone,
        a1_1.dateEmbauche,
        a1_1.diplome,
        a1_1.emailPro,
        a1_1.matricule,
        a1_1.password,
        a1_1.poste,
        a1_1.salaire,
        a1_1.statutContrat,
        a1_0.role,
        a1_3.numeroRPPS 
    from
        Administrateur a1_0 
    join
        Employe a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        personnes a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    left join
        Titulaire a1_3 
            on a1_0.idPersonne=a1_3.idPersonne 
    where
        a1_0.role=?
]]></system-out>
  </testcase>
  <testcase name="findByEmailPro_ShouldReturnAdmin" classname="l3o2.pharmacie.api.repository.AdministrateurRepositoryTest" time="0.166">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    select
        a1_0.idPersonne,
        a1_2.user_type,
        a1_2.adresse,
        a1_2.email,
        a1_2.nom,
        a1_2.prenom,
        a1_2.telephone,
        a1_1.dateEmbauche,
        a1_1.diplome,
        a1_1.emailPro,
        a1_1.matricule,
        a1_1.password,
        a1_1.poste,
        a1_1.salaire,
        a1_1.statutContrat,
        a1_0.role,
        a1_3.numeroRPPS 
    from
        Administrateur a1_0 
    join
        Employe a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        personnes a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    left join
        Titulaire a1_3 
            on a1_0.idPersonne=a1_3.idPersonne 
    where
        a1_1.emailPro=?
]]></system-out>
  </testcase>
  <testcase name="existsByMatricule_ShouldReturnCorrectStatus" classname="l3o2.pharmacie.api.repository.AdministrateurRepositoryTest" time="0.16">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    select
        a1_1.idPersonne 
    from
        Administrateur a1_0 
    join
        personnes a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        Employe a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    where
        a1_2.matricule=? 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_1.idPersonne 
    from
        Administrateur a1_0 
    join
        personnes a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        Employe a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    where
        a1_2.matricule=? 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="findByMatricule_WhenExists_ShouldReturnAdmin" classname="l3o2.pharmacie.api.repository.AdministrateurRepositoryTest" time="0.146">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    select
        a1_0.idPersonne,
        a1_2.user_type,
        a1_2.adresse,
        a1_2.email,
        a1_2.nom,
        a1_2.prenom,
        a1_2.telephone,
        a1_1.dateEmbauche,
        a1_1.diplome,
        a1_1.emailPro,
        a1_1.matricule,
        a1_1.password,
        a1_1.poste,
        a1_1.salaire,
        a1_1.statutContrat,
        a1_0.role,
        a1_3.numeroRPPS 
    from
        Administrateur a1_0 
    join
        Employe a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        personnes a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    left join
        Titulaire a1_3 
            on a1_0.idPersonne=a1_3.idPersonne 
    where
        a1_1.matricule=?
]]></system-out>
  </testcase>
  <testcase name="existsByEmail_ShouldReturnCorrectStatus" classname="l3o2.pharmacie.api.repository.AdministrateurRepositoryTest" time="0.15">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    select
        a1_1.idPersonne 
    from
        Administrateur a1_0 
    join
        personnes a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    where
        a1_1.email=? 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_1.idPersonne 
    from
        Administrateur a1_0 
    join
        personnes a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    where
        a1_1.email=? 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
  <testcase name="deleteByMatricule_ShouldRemoveAdmin" classname="l3o2.pharmacie.api.repository.AdministrateurRepositoryTest" time="0.152">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    select
        a1_0.idPersonne,
        a1_2.user_type,
        a1_2.adresse,
        a1_2.email,
        a1_2.nom,
        a1_2.prenom,
        a1_2.telephone,
        a1_1.dateEmbauche,
        a1_1.diplome,
        a1_1.emailPro,
        a1_1.matricule,
        a1_1.password,
        a1_1.poste,
        a1_1.salaire,
        a1_1.statutContrat,
        a1_0.role,
        a1_3.numeroRPPS 
    from
        Administrateur a1_0 
    join
        Employe a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        personnes a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    left join
        Titulaire a1_3 
            on a1_0.idPersonne=a1_3.idPersonne 
    where
        a1_1.matricule=?
Hibernate: 
    delete 
    from
        Administrateur 
    where
        idPersonne=?
Hibernate: 
    delete 
    from
        Employe 
    where
        idPersonne=?
Hibernate: 
    delete 
    from
        personnes 
    where
        idPersonne=?
Hibernate: 
    select
        a1_1.idPersonne 
    from
        Administrateur a1_0 
    join
        personnes a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        Employe a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    where
        a1_2.matricule=? 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_0.idPersonne,
        a1_2.user_type,
        a1_2.adresse,
        a1_2.email,
        a1_2.nom,
        a1_2.prenom,
        a1_2.telephone,
        a1_1.dateEmbauche,
        a1_1.diplome,
        a1_1.emailPro,
        a1_1.matricule,
        a1_1.password,
        a1_1.poste,
        a1_1.salaire,
        a1_1.statutContrat,
        a1_0.role,
        a1_3.numeroRPPS 
    from
        Administrateur a1_0 
    join
        Employe a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        personnes a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    left join
        Titulaire a1_3 
            on a1_0.idPersonne=a1_3.idPersonne
]]></system-out>
  </testcase>
  <testcase name="findByNomContainsIgnoreCaseOrPrenomContainsIgnoreCase_ShouldReturnMatchingAdmins" classname="l3o2.pharmacie.api.repository.AdministrateurRepositoryTest" time="0.158">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    select
        a1_0.idPersonne,
        a1_2.user_type,
        a1_2.adresse,
        a1_2.email,
        a1_2.nom,
        a1_2.prenom,
        a1_2.telephone,
        a1_1.dateEmbauche,
        a1_1.diplome,
        a1_1.emailPro,
        a1_1.matricule,
        a1_1.password,
        a1_1.poste,
        a1_1.salaire,
        a1_1.statutContrat,
        a1_0.role,
        a1_3.numeroRPPS 
    from
        Administrateur a1_0 
    join
        Employe a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        personnes a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    left join
        Titulaire a1_3 
            on a1_0.idPersonne=a1_3.idPersonne 
    where
        upper(a1_2.nom) like upper(?) escape '\' 
        or upper(a1_2.prenom) like upper(?) escape '\'
Hibernate: 
    select
        a1_0.idPersonne,
        a1_2.user_type,
        a1_2.adresse,
        a1_2.email,
        a1_2.nom,
        a1_2.prenom,
        a1_2.telephone,
        a1_1.dateEmbauche,
        a1_1.diplome,
        a1_1.emailPro,
        a1_1.matricule,
        a1_1.password,
        a1_1.poste,
        a1_1.salaire,
        a1_1.statutContrat,
        a1_0.role,
        a1_3.numeroRPPS 
    from
        Administrateur a1_0 
    join
        Employe a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        personnes a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    left join
        Titulaire a1_3 
            on a1_0.idPersonne=a1_3.idPersonne 
    where
        upper(a1_2.nom) like upper(?) escape '\' 
        or upper(a1_2.prenom) like upper(?) escape '\'
Hibernate: 
    select
        a1_0.idPersonne,
        a1_2.user_type,
        a1_2.adresse,
        a1_2.email,
        a1_2.nom,
        a1_2.prenom,
        a1_2.telephone,
        a1_1.dateEmbauche,
        a1_1.diplome,
        a1_1.emailPro,
        a1_1.matricule,
        a1_1.password,
        a1_1.poste,
        a1_1.salaire,
        a1_1.statutContrat,
        a1_0.role,
        a1_3.numeroRPPS 
    from
        Administrateur a1_0 
    join
        Employe a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        personnes a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    left join
        Titulaire a1_3 
            on a1_0.idPersonne=a1_3.idPersonne 
    where
        upper(a1_2.nom) like upper(?) escape '\' 
        or upper(a1_2.prenom) like upper(?) escape '\'
]]></system-out>
  </testcase>
  <testcase name="existsByEmailPro_ShouldReturnTrueWhenExists" classname="l3o2.pharmacie.api.repository.AdministrateurRepositoryTest" time="0.148">
    <system-out><![CDATA[Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    insert 
    into
        personnes
        (adresse, email, nom, prenom, telephone, user_type, idPersonne) 
    values
        (?, ?, ?, ?, ?, 'administrateurs', ?)
Hibernate: 
    insert 
    into
        Employe
        (dateEmbauche, diplome, emailPro, matricule, password, poste, salaire, statutContrat, idPersonne) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        Administrateur
        (role, idPersonne) 
    values
        (?, ?)
Hibernate: 
    select
        a1_1.idPersonne 
    from
        Administrateur a1_0 
    join
        personnes a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        Employe a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    where
        a1_2.emailPro=? 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_1.idPersonne 
    from
        Administrateur a1_0 
    join
        personnes a1_1 
            on a1_0.idPersonne=a1_1.idPersonne 
    join
        Employe a1_2 
            on a1_0.idPersonne=a1_2.idPersonne 
    where
        a1_2.emailPro=? 
    fetch
        first ? rows only
]]></system-out>
  </testcase>
</testsuite>